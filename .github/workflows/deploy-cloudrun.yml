name: Deploy to Cloud Run
on:
  workflow_dispatch:
    inputs:
      deployment_id:
        description: 'Devyntra deployment id'
        required: true
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Authenticate to Google Cloud
        id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v2
      - name: Configure Artifact Registry Docker auth
        env:
          REGION: us-central1
        run: |
          gcloud auth configure-docker "$REGION-docker.pkg.dev" -q
      - name: Build Docker image
        env:
          PROJECT_ID: devyntra-500e4
          REGION: us-central1
          SERVICE: dev-cost-guardian-24954-28068-
        run: |
          set -e
          gcloud config set project "$PROJECT_ID"
          IMAGE="$REGION-docker.pkg.dev/$PROJECT_ID/cloud-run-source-deploy/$SERVICE:${{ github.sha }}"
          echo "Building $IMAGE"
          docker build -t "$IMAGE" .
          echo "IMAGE=$IMAGE" >> $GITHUB_ENV
      - name: Push Docker image
        env:
          IMAGE: ${{ env.IMAGE }}
        run: |
          set -e
          docker push "$IMAGE"
      - name: Deploy to Cloud Run
        env:
          REGION: us-central1
          SERVICE: dev-cost-guardian-24954-28068-
          IMAGE: ${{ env.IMAGE }}
        run: |
          set -e
          gcloud run deploy "$SERVICE"             --region="$REGION"             --image="$IMAGE"             --allow-unauthenticated             --port=8080
      - name: Fetch Service URL
        id: fetch_url
        env:
          REGION: us-central1
          SERVICE: dev-cost-guardian-24954-28068-
        run: |
          set -e
          URL=$(gcloud run services describe "$SERVICE" --region="$REGION" --format='value(status.url)')
          echo "SERVICE_URL=$URL" >> $GITHUB_OUTPUT
      - name: Post status to Devyntra
        env:
          WEBHOOK_URL: ${{ secrets.DEVYNTRA_WEBHOOK_URL }}
          WEBHOOK_TOKEN: ${{ secrets.DEVYNTRA_WEBHOOK_TOKEN }}
        run: |
          set -e
          STATUS="success"
          DEPLOYMENT_ID='${{ inputs.deployment_id }}'
          SERVICE_URL='${{ steps.fetch_url.outputs.SERVICE_URL }}'
          # Trim possible CRLF/whitespace from secrets
          URL_CLEAN=$(printf '%s' "$WEBHOOK_URL" | tr -d '
 ')
          TOKEN_CLEAN=$(printf '%s' "$WEBHOOK_TOKEN" | tr -d '
 ')
          # Default SERVICE_URL to empty string if unset
          if [ -z "$SERVICE_URL" ]; then SERVICE_URL=""; fi
          if [ -n "$URL_CLEAN" ] && [ -n "$TOKEN_CLEAN" ]; then
            case "$URL_CLEAN" in http://*|https://*) : ;; *) echo "Invalid webhook URL, skipping callback"; exit 0;; esac
            DATA=$(printf '%s' "{"deploymentId":"$DEPLOYMENT_ID","status":"$STATUS","deploymentUrl":"$SERVICE_URL"}")
            curl --fail --retry 3 --retry-delay 2 -sS -X POST "$URL_CLEAN"               -H 'Content-Type: application/json'               -H "X-Devyntra-Token: $TOKEN_CLEAN"               --data "$DATA"
          else
            echo "Devyntra webhook secrets not set; skipping callback"
          fi
